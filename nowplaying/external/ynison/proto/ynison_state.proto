syntax = "proto3";

package ynison_state;

import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";

import "device.proto";
import "player_state.proto";
import "player_queue_inject.proto";
import "playing_status.proto";

option go_package = "a.yandex-team.ru/music/backend/music-ynison/main/proto/ynisonstate";

option java_package = "com.yandex.media.ynison.service";
option java_multiple_files = true;


service YnisonStateService {
  rpc PutYnisonState(stream PutYnisonStateRequest) returns (stream PutYnisonStateResponse) {
    option(google.api.http) = {
      post: "/ynison_state.YnisonStateService/PutYnisonState"
    };
  };
}


// Сообщение с обновленным состоянием.
// Клиент отправляет на сервер один из параметров в зависимости
// от произошедшего события.
message PutYnisonStateRequest {
    oneof parameters {
       // Обновить общее состояние.
       UpdateFullState update_full_state = 1;

       // Обновить активное устройство.
       UpdateActiveDevice update_active_device = 2;

       // Обновить статус воспроизведения.
       UpdatePlayingStatus update_playing_status = 3;

       // Обновить состояние плеера.
       UpdatePlayerState update_player_state = 4;

       // Обновить громкость. Устаревшее значение, смотри [update_volume_info].
       UpdateVolume update_volume = 5 [deprecated = true];

       // Обновить состояние проигрывания ижектируемой в очередь сущности.
       UpdatePlayerQueueInject update_player_queue_inject = 6;

       // Обновить информацию об устройстве отправившем информацию.
       UpdateSessionParams update_session_params = 9;

       // Обновить громкость.
       UpdateVolumeInfo update_volume_info = 11;

       // Запросить синхронизацию с сервисом ЕОВ.
       SyncStateFromEOV sync_state_from_eov = 12;
    };

    // Время последнего изменения в плеере в миллисекундах.
    int64 player_action_timestamp_ms = 7;

    // Request id. Генерируется клиентом, используется для логирования и отладки
    string rid = 8;

    //Определяет тактику перехвата активности устройством отправившим сообщение.
    ActivityInterceptionType activity_interception_type = 10;

    enum ActivityInterceptionType {
      //Устройство, отправившее сообщение, не пытается перехватить активность.
      DO_NOT_INTERCEPT_BY_DEFAULT = 0;
      //Устройство, отправившее сообщение, становится активным,
      // если на момент обработки сообщения активное устройство отсутствует.
      INTERCEPT_IF_NO_ONE_ACTIVE = 1;
      //Устройство, отправившее сообщение, получает активность после успешной обработки сообщения.
      INTERCEPT_EAGER = 2;
    }
}

// Сообщение с обновленным состоянием.
//
// Сервер отправляет на клиент в следующих случаях:
// * В ответ на `PutYnisonStateRequest`, который меняет состояние на сервере.
// * Если произошло обновление на другом клиенте и его нужно транслировать всем подключенным устройствам
// (например, сменилась очередь воспроизведения).
// * Если изменился список устройств.
message PutYnisonStateResponse {
    // Состояние плеера.
    PlayerState player_state = 1;

    // Список подключенных устройств.
    repeated Device devices = 2;

    // Идентификатор активного устройства.
    google.protobuf.StringValue active_device_id_optional = 3;

    // Время создания ответа сервера в миллисекундах.
    int64 timestamp_ms = 4;

    //Request id. Предположительно тот, который послужил причиной отправки ответа.
    string rid = 5;
}


// Добавить состояние проигрывания ижектируемой в очередь сущности.
message UpdatePlayerQueueInject {
    PlayerQueueInject player_queue_inject = 1;
}


// Обновить активное устройство.
// Отправляется при выборе пользователем устройства, которое должно проигрывать звук.
message UpdateActiveDevice {
    google.protobuf.StringValue device_id_optional = 1;
}


// Обновить статус воспроизведения.
//
// Отправляется в следующих случаях:
// * Старт воспроизведения (после паузы).
// * Остановка воспроизведения/пауза (после проигрывания).
// * Перемотка.
// * Изменение скорости воспроизведения.
message UpdatePlayingStatus {
    PlayingStatus playing_status = 1;
}


// Обновить уровень громкости. Устаревшее сообщение, смотри [UpdateVolumeInfo].
message UpdateVolume {

    option deprecated = true;

    // Громкость. Значения в интервале [0; 1].
    double volume = 1;

    // device id устройства, на котором меняется громкость.
    string device_id = 2;
}


// Обновить громкость устройства.
message UpdateVolumeInfo {

    // device id устройства, на котором меняется громкость.
    string device_id = 1;

    // новое значение состояния громкости с версией изменений.
    DeviceVolume volume_info = 2;
}


// Обновить состояние плеера.
//
// Отправляется в следующих случаях:
// * Старт новой очереди (плейлист, исполнитель, проч.).
// * Обновление очереди (добавление/удаление сущности из очереди).
// * Изменение режима повтора/шаффла.
message UpdatePlayerState {
    // Состояние проигрывания.
    PlayerState player_state = 1;
}


// Обновить полное состояние проигрывания и устройств.
//
// Отправляется в следующих случаях:
// * Холодный старт.
// * Выключение оффлайн режима.
// * Появление сети после ее отключения.
message UpdateFullState {
    // Состояние плеера.
    PlayerState player_state = 1;

    // Является ли устройство активным (играет звук).
    bool is_currently_active = 2;

    UpdateDevice device = 3;

    // Запрос к серверу о необходимости синхронизации ЕОВ во время обработки сообщения [UpdateFullState].
    // Если не передан - синхронизация будет вызвана только для сценариев "холодного старта"
    // (нет очереди воспроизведения на на устройстве, ни на сервере).
    SyncStateFromEOV sync_state_from_eov_optional = 4;
}

//Обновить поведение сервера в отношении устройства в рамках сессии.
//Параметры сбрасываются при переподключении
message UpdateSessionParams {
    // Пока устройство находится в пассивном режиме, оно не будет получать с сервера новые события.
    // Флаг сбрасывается, если текущее устройство становится активным.
    // Устройство обязательно получит сообщение о том, что стало активным.
    // Если текущее устройство активно, этот флаг не может быть быть установлен в true и будет проигнорирован.
    bool mute_events_if_passive = 1;
}

// Информация об устройстве, передаваемая самим устройством на сервер для инициализации
message UpdateDevice {
    // Информация об устройстве.
    DeviceInfo info = 1;

    // Громкость. Устарело, смотри [volume_info].
    double volume = 2 [deprecated = true];

    // Настройки доступности.
    DeviceCapabilities capabilities = 3;

    // Громкость.
    DeviceVolume volume_info = 4;
}

// Информация о запросе синхронизации с сервисом ЕОВ (единой очереди воспроизведения).
// Запрос синхронизации может быть отклонен сервером, если:
// * текущий девайс на данный момент не является активным
// * текущий девайс не получил активности в результате вызова этого метода
//
//  Обновление происходит по следующему сценарию.
//  1. Бэкенд проверяет активность устройства, и делает его активным, если требуется (см. ActivityInterceptionType).
//  2. Если устройство не является активным после шага 1, то команда тихо игнорируется (никаких событий или ошибок не произойдет). Выполнение прерывается.
//  3. Бэкенд получает список очередей из Единой Очереди Воспроизведения.
//  4. Если id последней очереди в списке совпадает с actual_queue_id, то обновление очереди не произойдет и мы перейдем к пункту 6.
//  5. Пробуем обновить стейт на основании ЕОВ. Новое состояние плеера, в случае обновления,
//     будет содержать [UpdateVersion#device_id] отличным от id устройства, отправившего сообщение
//  6. Если стейт был обновлен или сменилось активное устройство, то рассылаем эвент всем устройствам. Иначе выходим из метода без событий и ошибок.
message SyncStateFromEOV {

  // Идентификатор очереди устройства в ЕОВ.
  // Пустая строка - допустимое значение, если клиент не имеет информации о синхронизации очередей.
  string actual_queue_id = 1;
}
