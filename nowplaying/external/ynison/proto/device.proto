syntax = "proto3";

package ynison_state;

import "update_version.proto";
import "device_type.proto";

option go_package = "a.yandex-team.ru/music/backend/music-ynison/main/proto/ynisonstate";

option java_package = "com.yandex.media.ynison.service";
option java_multiple_files = true;


// Устройство.
message Device {
  // Информация об устройстве.
  DeviceInfo info = 1;

  // Громкость. Устаревшее значение, смотри [volume_info].
  double volume = 2 [deprecated = true];

  // Настройки доступности.
  DeviceCapabilities capabilities = 3;

  //Информация о сессии. Ожидаемо уникальна для каждого отдельно инициализированного подключения.
  Session session = 4;

  // Оффлайн ли устройство (не подключено к юнисону на данный момент).
  bool is_offline = 5; 
  
  // Состояние громкости устройства вместе с информацией о последнем устройстве, изменившим её.
  DeviceVolume volume_info = 6;
}

message DeviceVolume {

  // Громкость. Значения в интервале [0.0; 1.0]
  //
  // Значение тесно связано с [DeviceCapabilities.volume_granularity].
  // Ожидается округление мантиссы до 4 знаков при делении 1.0 на число шагов шкалы громкости
  //
  // Пример:
  // * шкала в 16 делений: [0.0625, 0.125, ..., 0.9375, 1.00]
  // * шкала в 13 делений: [0.0769, 0.1538, ..., 0.9230, 0.9997]
  //
  // Обратные вычисления:
  // * шкала в 16 делений: round(0.9375 * 16) = 15 (15.0)
  // * шкала в 13 делений: round(0.9230 * 13) = 12 (11.9999)
  double volume = 1;

  // Версия последнего изменения громкости устройства.
  UpdateVersion version = 2;
}

// Информация об устройстве.
message DeviceInfo {
  // device id устройства.
  string device_id = 1;

  // Название устройства.
  string title = 2;

  // Тип устройства.
  DeviceType type = 3;
  
  // Информация о клиентском приложении подключенного устройства
  string app_name = 4;
  
  // Информация о версии клиентского приложения подключенного устройства
  string app_version = 5;
}


// Настройки доступности устройства.
message DeviceCapabilities {
    // Может ли устройство быть активным и проигрывать сущности.
    bool can_be_player = 1;

    // Может ли устройство быть пультом.
    bool can_be_remote_controller = 2;
  
    // Максимальное количество делений на шкале громкости для управления этим устройством:
    // * 0 - если устройство не поддерживает удаленный контроль громкости
    // * N - если устройство поддерживает удаленный контроль громкости
    //
    // Допустимы значения в диапазоне [0, 1000]
    // Девайсы в режиме пульта обязуются рисовать контрол управления равный N (либо такой, которому пропорционально заданное N)
    //
    // Пример: Телевизор поддерживает 20 делений
    // * Телефон может нарисовать шкалу на 20 делений: [0.05, 0.10, ..., 0.95, 1.00]
    // * Телефон может нарисовать шкалу на 10 делений: [0.10, 0.20, ..., 0.90, 1.00]
    // * Телефон НЕ может рисовать шкалу на 16 делений: [0.0625, 0.125, ..., 0.9375, 1.00]
    // * Телефон НЕ может рисовать шкалу на 100 делений: [0.01, 0.02, ..., 0.99, 1.00]
    //
    // Если не соблюдать эти требования, телевизор не сможет применить значение корректно.
    // * больший шаг может привести к ошибке округления и лишнему (ответному) сообщению от приемника
    // * меньшей шаг может привести к неприменению громкостей, округляющихся к одному значению
    uint32 volume_granularity = 3;
}

message Session {
  // Сервер сгенерирует случайное значение самостоятельно.
  // Клиент может заполнить это значение самостоятельно при UpdateFullState,
  // в таком случае сервер использует переданное значение.
  int64 id = 1;
}
